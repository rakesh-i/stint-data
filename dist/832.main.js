(self.webpackChunk=self.webpackChunk||[]).push([[832],{1866:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var counterapi__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2722);\n/* harmony import */ var counterapi__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(counterapi__WEBPACK_IMPORTED_MODULE_0__);\n\nconst counter = new counterapi__WEBPACK_IMPORTED_MODULE_0__.CounterAPI();\nconst apiBaseURL = 'https://api.openf1.org/v1';\n// const apiBaseURL = 'http://127.0.0.1:8000/v1';\nlet driverMap = new Map();\nlet controller = new AbortController();\nlet conList = ['McLaren', 'Mercedes', 'Ferrari', 'Red Bull Racing', 'Williams', 'Aston Martin', 'Kick Sauber', 'Racing Bulls', 'Haas F1 Team', 'Alpine', 'null', null];\nlet curYear = 2025;\nlet toggleLabel = document.getElementById('toggleLabel');\nlet orderby = \"Median\";\nconst exportdiv = document.getElementById('export');\nconst container = document.getElementById('table-container');\nconst chart = document.getElementById('charts');\nconst boxDiv = document.getElementById('boxPlot');\nconst barDiv = document.getElementById('barPlot');\nconst lineDiv = document.getElementById('linePlot');\nconst loadingScreen = document.getElementById('loading-screen');\nconst counterDiv = document.getElementById('count');\n\n// please don't break it.\n// counter.up(\"rakesh-i.github.io\", \"stint-data\").then((res) => {\n//     counterDiv.textContent = res.Count;\n// })\n\n// Interactions\nfunction selectYear(event) {\n  const listYears = document.querySelectorAll('.year-container li');\n  listYears.forEach(item => item.classList.remove('choose'));\n  const formlist = document.querySelector('#driver-stints-form');\n  formlist.innerHTML = '';\n  event.target.classList.add('choose');\n  curYear = parseInt(event.target.textContent);\n  event.target.scrollIntoView({\n    behavior: 'smooth',\n    block: 'start'\n  });\n  fetchMeetings(event.target.textContent);\n}\nfunction selectRace(event) {\n  const listRaces = document.querySelectorAll('.race-container li');\n  listRaces.forEach(item => item.classList.remove('choose'));\n  const formlist = document.querySelector('#driver-stints-form');\n  formlist.innerHTML = '';\n  event.target.classList.add('choose');\n  event.target.scrollIntoView({\n    behavior: 'smooth',\n    block: 'start'\n  });\n  fetchSessions(event.target.textContent);\n}\nfunction selectSession(event) {\n  const listSession = document.querySelectorAll('.session-container li');\n  listSession.forEach(item => item.classList.remove('choose'));\n  const formlist = document.querySelector('#driver-stints-form');\n  formlist.innerHTML = '';\n  event.target.classList.add('choose');\n  event.target.scrollIntoView({\n    behavior: 'smooth',\n    block: 'start'\n  });\n  showDriverSearch(event.target.value);\n}\nfunction selectDriver(event) {\n  const listDriver = document.querySelectorAll('#driver-list li');\n  event.target.classList.toggle('choose');\n  // searchDriver();\n}\n\n// Create lists\nfunction createDriverList(data) {\n  const driverList = document.querySelector('#driver-list');\n  driverList.innerHTML = '';\n  let array = [...data];\n  if (curYear == 2025) {\n    array.sort((a, b) => {\n      return conList.indexOf(a.team_name) - conList.indexOf(b.team_name);\n    });\n  }\n  array.forEach(x => {\n    const driver = document.createElement('li');\n    driver.value = x.driver_number;\n    driver.dataset.team = x.team_name;\n    driver.dataset.team_color = x.team_colour;\n    driver.textContent = x.broadcast_name;\n    driverList.appendChild(driver);\n  });\n  const listDriver = document.querySelectorAll('#driver-list li');\n  listDriver.forEach(item => {\n    item.addEventListener('click', selectDriver);\n  });\n}\nfunction createSessionList(data) {\n  const sessionList = document.querySelector('#session-list');\n  sessionList.innerHTML = '';\n  data.forEach(x => {\n    const session = document.createElement('li');\n    session.value = x.session_key;\n    session.textContent = x.session_name;\n    sessionList.appendChild(session);\n  });\n  const listSession = document.querySelectorAll('.session-container li');\n  listSession.forEach(item => {\n    item.addEventListener('click', selectSession);\n  });\n  let n = listSession.length;\n  if (n > 0) {\n    listSession[n - 1].classList.add('choose');\n    listSession[n - 1].scrollIntoView({\n      behavior: 'smooth',\n      block: 'start'\n    });\n  }\n  showDriverSearch(listSession[n - 1].value);\n}\nfunction createRacelist(data) {\n  const raceList = document.querySelector('#race-list');\n  raceList.innerHTML = '';\n  data.forEach(x => {\n    const race = document.createElement('li');\n    race.value = x.country_name;\n    race.textContent = x.country_name;\n    raceList.appendChild(race);\n  });\n  const listRaces = document.querySelectorAll('.race-container li');\n  listRaces.forEach(item => {\n    item.addEventListener('click', selectRace);\n  });\n  let n = listRaces.length;\n  listRaces[n - 1].classList.add('choose');\n  listRaces[n - 1].scrollIntoView({\n    behavior: 'smooth',\n    block: 'start'\n  });\n  fetchSessions(listRaces[n - 1].textContent);\n}\nfunction createYearlist() {\n  const listYears = document.querySelectorAll('.year-container li');\n  listYears.forEach(item => {\n    item.addEventListener('click', selectYear);\n  });\n  listYears[0].classList.add('choose');\n  listYears[0].scrollIntoView({\n    behavior: 'smooth',\n    block: 'start'\n  });\n  fetchMeetings(listYears[0].textContent);\n}\n\n// API calls and gathering data\nasync function fetchMeetings(year) {\n  try {\n    let meetings = await fetch(`${apiBaseURL}/meetings?year=${year}`);\n    if (!meetings.ok) {\n      if (!meetings.status === 500) {\n        alert(\"üö® Server Error (500). Please try again later.\");\n      } else if (meetings.status === 429) {\n        alert(\"‚ö†Ô∏è Too many requests (429). Please wait and try again.\");\n      } else {\n        alert(`‚ùå Error ${meetings.status}: ${meetings.statusText}`);\n      }\n      return null;\n    }\n    let data = await meetings.json();\n    createRacelist(data);\n  } catch (error) {\n    if (error.name === \"AbortError\") {\n      console.log(\"Request was aborted.\");\n    } else if (error instanceof TypeError && error.message === \"Failed to fetch\") {\n      alert(\"Failed to reach server.\");\n    } else {\n      alert(`‚ùó Unexpected error: ${error.message}`);\n    }\n    console.log(error);\n    return null;\n  }\n}\nasync function fetchSessions(country) {\n  ;\n  try {\n    const year = document.querySelector('.year-container li.choose').textContent;\n    if (!country) {\n      alert('Please select l_name country.');\n      return;\n    }\n    let session = await fetch(`${apiBaseURL}/sessions?country_name=${country}&year=${year}`);\n    if (!session.ok) {\n      if (!session.status === 500) {\n        alert(\"üö® Server Error (500). Please try again later.\");\n      } else if (session.status === 429) {\n        alert(\"‚ö†Ô∏è Too many requests (429). Please wait and try again.\");\n      } else {\n        alert(`‚ùå Error ${session.status}: ${session.statusText}`);\n      }\n      return null;\n    }\n    let data = await session.json();\n    createSessionList(data);\n  } catch (error) {\n    if (error.name === \"AbortError\") {\n      console.log(\"Request was aborted.\");\n    } else if (error instanceof TypeError && error.message === \"Failed to fetch\") {\n      alert(\"Failed to reach server.\");\n    } else {\n      alert(`‚ùó Unexpected error: ${error.message}`);\n    }\n    console.log(error);\n    return null;\n  }\n}\nasync function showDriverSearch(sessionKey) {\n  try {\n    let drivers = await fetch(`${apiBaseURL}/drivers?session_key=${sessionKey}`);\n    if (!drivers.ok) {\n      if (!drivers.status === 500) {\n        alert(\"üö® Server Error (500). Please try again later.\");\n      } else if (drivers.status === 429) {\n        alert(\"‚ö†Ô∏è Too many requests (429). Please wait and try again.\");\n      } else {\n        alert(`‚ùå Error ${drivers.status}: ${drivers.statusText}`);\n      }\n      return null;\n    }\n    let data = await drivers.json();\n    if (!sessionKey) {\n      alert('Please select l_name session.');\n      return;\n    }\n    createDriverList(data);\n  } catch (error) {\n    if (error.name === \"AbortError\") {\n      console.log(\"Request was aborted.\");\n    } else if (error instanceof TypeError && error.message === \"Failed to fetch\") {\n      alert(\"Failed to reach server.\");\n    } else {\n      alert(`‚ùó Unexpected error: ${error.message}`);\n    }\n    console.log(error);\n    return null;\n  }\n}\nasync function gatherdata(driver_number, name, team, team_color) {\n  try {\n    const stint = [];\n    const stinttyre = [];\n    const sessionKey = document.querySelector('#session-list li.choose').value;\n    let response = await fetch(`${apiBaseURL}/laps?session_key=${sessionKey}&driver_number=${driver_number}`, {\n      signal: controller.signal\n    });\n    if (!response.ok) {\n      if (response.status === 500) {\n        alert(\"üö® Server Error (500). Please try again later.\");\n      } else if (response.status === 429) {\n        alert(\"‚ö†Ô∏è Too many requests (429). Please wait and try again.\");\n      } else {\n        alert(`‚ùå Error ${response.status}: ${response.statusText}`);\n      }\n      return null;\n    }\n    const data1 = await response.json();\n    response = await fetch(`${apiBaseURL}/stints?session_key=${sessionKey}&driver_number=${driver_number}`, {\n      signal: controller.signal\n    });\n    if (!response.ok) {\n      if (response.status === 500) {\n        alert(\"üö® Server Error (500). Please try again later.\");\n      } else if (response.status === 429) {\n        alert(\"‚ö†Ô∏è Too many requests (429). Please wait and try again.\");\n      } else {\n        alert(`‚ùå Error ${response.status}: ${response.statusText}`);\n      }\n      return null;\n    }\n    const data2 = await response.json();\n    // console.log(data1);\n    if (!data1 || !data2) {\n      throw new Error('Missing data for driver', driver_number);\n    }\n    for (let i in data2) {\n      stint.push([]);\n    }\n    for (let i in data2) {\n      let start = data2[i].lap_start;\n      let end = data2[i].lap_end;\n      stinttyre.push(data2[i].compound);\n      for (let j = start; j <= end; j++) {\n        let x = data1[j - 1];\n        if (x == undefined) {\n          stint[i].push(['NaN', 'NaN']);\n        } else if (x.lap_duration === null) {\n          stint[i].push(['NaN', x.lap_number]);\n        } else {\n          stint[i].push([x.lap_duration.toFixed(3), x.lap_number]);\n        }\n      }\n    }\n    const sessionType = document.querySelector(\".session-container .choose\")?.textContent || \"\";\n    if (sessionType.toLowerCase() == \"sprint\" || sessionType.toLowerCase().includes(\"race\")) {\n      let allLaps = [];\n      for (let i = 0; i < stint.length; i++) {\n        allLaps = allLaps.concat(stint[i]);\n      }\n      stint.push(allLaps);\n      stinttyre.push(\"ALL\");\n    }\n    driverMap.set(`${name}`, {\n      laptimes: [...stint],\n      tyres: [...stinttyre],\n      num: driver_number,\n      team_name: team,\n      team_color: team_color\n    });\n  } catch (error) {\n    if (error.name === \"AbortError\") {\n      console.log(\"Request was aborted.\");\n    } else if (error instanceof TypeError && error.message === \"Failed to fetch\") {\n      alert(\"Failed to reach server.\");\n    } else {\n      alert(`‚ùó Unexpected error: ${error.message}`);\n    }\n    console.log(error);\n    return null;\n  }\n}\n\n// Displaying data\nfunction displayTable(stintmap) {\n  let l_name = [];\n  let t_name = [];\n  let d_name = [];\n  let stintnum = new Map();\n  let c = 0;\n  let x = 0;\n  for (let [driver, data] of stintmap) {\n    d_name.push([driver, data.laptimes.length, data.team_color]);\n    if (x > 0) {\n      c += data.laptimes.length;\n    } else {\n      c += data.laptimes.length - 1;\n    }\n    x++;\n    stintnum.set(c, 1);\n    for (let i = 0; i < data['laptimes'].length; i++) {\n      l_name.push(data.laptimes[i]);\n      t_name.push(data.tyres[i]);\n    }\n  }\n  chart.style.display = \"block\";\n  exportdiv.style.display = 'flex';\n  if (l_name.length == 0) {\n    container.innerHTML = '';\n    chart.style.display = 'none';\n    exportdiv.style.display = 'none';\n    return;\n  }\n  let table = '<table border=\"1\">';\n\n  // Drivers name\n  table += '<tr>';\n  table += '<th class=\"border-bottom border-right border-left\">Driver</th>';\n  for (let i = 0; i < d_name.length; i++) {\n    table += `<th class=\"border-bottom border-right border-left\" style=\"background-color:#${d_name[i][2]}\" colspan=\"${d_name[i][1]}\">${d_name[i][0]}</th>`;\n  }\n  table += '</tr>';\n\n  // Tyres name\n  table += '<tr>';\n  table += '<th class=\"border-bottom border-right border-left\">Tyre</th>';\n  for (let i = 0; i < l_name.length; i++) {\n    if (i == 0) {\n      if (stintnum.has(i)) {\n        table += `<th class=\"${t_name[i]} border-left border-right border-bottom\">${t_name[i]}</th>`;\n      } else {\n        table += `<th class=\"${t_name[i]} border-left border-bottom\">${t_name[i]}</th>`;\n      }\n    } else if (stintnum.has(i)) {\n      table += `<th class=\"${t_name[i]} border-right border-bottom\">${t_name[i]}</th>`;\n    } else {\n      table += `<th class=\"${t_name[i]} border-bottom\">${t_name[i]}</th>`;\n    }\n  }\n  table += '</tr>';\n  let maxLaps = Math.max(...l_name.map(s => s.length));\n  for (let j = 0; j < maxLaps; j++) {\n    table += '<tr>';\n    if (j === 0) {\n      table += '<th rowspan=\"' + maxLaps + '\">Laps</th>';\n    }\n    // console.log(l_name);\n    for (let i = 0; i < l_name.length; i++) {\n      // console.log(l_name[i][j]);\n      let timeFormated = l_name[i][j] !== undefined ? convertTime(l_name[i][j][0]) : '';\n      if (i == 0) {\n        if (stintnum.has(i)) {\n          table += `<td class=\"lap selected border-left border-right\" data-stint=\"${i}\" data-lap=\"${j}\" value=\"${l_name[i][j] || ''}\">${timeFormated || ''}</td>`;\n        } else {\n          table += `<td class=\"lap selected border-left\" data-stint=\"${i}\" data-lap=\"${j}\" value=\"${l_name[i][j] || ''}\">${timeFormated || ''}</td>`;\n        }\n      } else if (stintnum.has(i)) {\n        table += `<td class=\"lap selected border-right\" data-stint=\"${i}\" data-lap=\"${j}\" value=\"${l_name[i][j] || ''}\">${timeFormated || ''}</td>`;\n      } else if (i == l_name.length - 1) {\n        table += `<td class=\"lap selected border-right\" data-stint=\"${i}\" data-lap=\"${j}\" value=\"${l_name[i][j] || ''}\">${timeFormated || ''}</td>`;\n      } else {\n        table += `<td class=\"lap selected\" data-stint=\"${i}\" data-lap=\"${j}\" value=\"${l_name[i][j] || ''}\">${timeFormated || ''}</td>`;\n      }\n    }\n    table += '</tr>';\n  }\n\n  // Averages \n  table += '<tr>';\n  table += '<th class=\"border-top\">Average</th>';\n  for (let i = 0; i < l_name.length; i++) {\n    if (i == 0) {\n      if (stintnum.has(i)) {\n        table += `<td id=\"avg-${i}\" class=\"border-left border-right border-top\">0.000</td>`;\n      } else {\n        table += `<td id=\"avg-${i}\" class=\"border-left border-top\">0.000</td>`;\n      }\n    } else if (stintnum.has(i)) {\n      table += `<td id=\"avg-${i}\" class=\"border-right border-top\">0.000</td>`;\n    } else {\n      table += `<td id=\"avg-${i}\" class=\"border-top\">0.000</td>`;\n    }\n  }\n  table += '</tr>';\n  table += '</table>';\n  container.innerHTML = table;\n  document.querySelectorAll('.lap').forEach(cell => {\n    cell.addEventListener('click', () => {\n      if (cell.classList.contains('selected')) {\n        cell.classList.remove('selected');\n        cell.classList.add('deselected');\n      } else {\n        cell.classList.remove('deselected');\n        cell.classList.add('selected');\n      }\n      updateAverages(l_name, t_name);\n      updatePlot();\n    });\n  });\n  updateAverages(l_name, t_name);\n}\nfunction updatePlot() {\n  var x;\n  var y;\n  const selectiondiv = document.getElementsByClassName('selection');\n  x = selectiondiv.clientWidth;\n  if (x > 1080) {\n    y = x / 1.777;\n  }\n  let stintmap = new Map();\n  const table = document.querySelector(\"table\");\n  if (!table) return;\n  const rows = table.querySelectorAll(\"tr\");\n  let drivers = [];\n  let stintCounts = [];\n  let tyres = [];\n  let teamColors = [];\n  let stintLapTimes = [];\n  const driverCells = rows[0].querySelectorAll(\"th\");\n  for (let i = 1; i < driverCells.length; i++) {\n    let driver = driverCells[i].textContent.trim();\n    let stintCount = parseInt(driverCells[i].getAttribute(\"colspan\")) || 1;\n    let teamColor = driverCells[i].style.backgroundColor || \"#000000\";\n    drivers.push(driver);\n    stintCounts.push(stintCount);\n    teamColors.push(teamColor);\n  }\n  const tyreCells = rows[1].querySelectorAll(\"th\");\n  for (let i = 1; i < tyreCells.length; i++) {\n    tyres.push(tyreCells[i].textContent.trim());\n  }\n  let driverIndex = 0;\n  let stintIndex = 0;\n  let driverStints = new Map();\n  drivers.forEach((driver, i) => {\n    driverStints.set(driver, {\n      laptimes: [],\n      tyres: [],\n      teamColor: teamColors[i]\n    });\n    for (let j = 0; j < stintCounts[i]; j++) {\n      driverStints.get(driver).laptimes.push([]);\n      driverStints.get(driver).tyres.push(tyres[stintIndex]);\n      stintIndex++;\n    }\n  });\n  for (let rowIndex = 2; rowIndex < rows.length - 1; rowIndex++) {\n    const lapCells = rows[rowIndex].querySelectorAll(\"td\");\n    stintIndex = 0;\n    driverIndex = 0;\n    for (let i = 0; i < lapCells.length; i++) {\n      let time = lapCells[i].getAttribute(\"value\").split(\",\");\n      let lapNumber = time[1] === \"NaN\" ? NaN : parseFloat(time[1]);\n      let numericTime = time[0] === \"NaN\" ? NaN : parseFloat(time[0]);\n      if (lapCells[i].classList.contains(\"selected\")) {\n        driverStints.get(drivers[driverIndex]).laptimes[stintIndex].push([numericTime, lapNumber]);\n      }\n      stintIndex++;\n      if (stintIndex >= stintCounts[driverIndex]) {\n        stintIndex = 0;\n        driverIndex++;\n      }\n    }\n  }\n  driverStints.forEach((data, driver) => {\n    stintmap.set(driver, {\n      laptimes: data.laptimes,\n      tyres: data.tyres,\n      teamColor: data.teamColor\n    });\n  });\n  let traces = [];\n  let traceData = [];\n  stintmap.forEach((data, driver) => {\n    let tyreCount = {};\n    data.laptimes.forEach((stint, index) => {\n      let filteredLaps = removeOutliers(stint);\n      let y = filteredLaps.map(item => item[0]);\n      let median = getMedian(y);\n      let mean = getMean(y);\n      let tyre = data.tyres[index].slice(0, 3).toUpperCase();\n      let lastName = driver.split(\" \").pop().slice(0, 3).toUpperCase();\n      if (!tyreCount[tyre]) {\n        tyreCount[tyre] = 1;\n      } else {\n        tyreCount[tyre]++;\n        tyre += ` (${tyreCount[tyre]})`;\n      }\n      if (mean != -1 && median !== -1) {\n        traceData.push({\n          median: median,\n          mean: mean,\n          trace: {\n            y: y,\n            type: \"box\",\n            boxpoints: false,\n            name: tyre === 'ALL' ? `${lastName}` : `${lastName}-${tyre}`,\n            marker: {\n              color: 'white'\n            },\n            fillcolor: data.teamColor,\n            outliercolor: data.teamColor,\n            jitter: 0.5,\n            whiskerwidth: 0.2,\n            line: {\n              width: 2\n            },\n            boxpoints: 'suspectedoutliers',\n            boxmean: orderby == 'Mean' ? true : false\n          }\n        });\n      }\n    });\n  });\n  if (orderby == 'Mean') {\n    traceData.sort((a, b) => a.mean - b.mean);\n  } else {\n    traceData.sort((a, b) => a.median - b.median);\n  }\n  traces = traceData.map(item => item.trace);\n  const now = new Date();\n  const timestamp = now.toISOString().replace(/[-T:.Z]/g, \"\").slice(3, 14);\n  let config = {\n    responsive: true,\n    toImageButtonOptions: {\n      format: 'png',\n      // one of png, svg, jpeg, webp\n      filename: `plot_${timestamp}`,\n      height: 800,\n      width: 1080,\n      scale: 1\n    }\n  };\n  let layout1 = {\n    title: {\n      text: `Race Pace Sorted by ${orderby}`\n    },\n    xaxis: {\n      tickangle: -90,\n      showline: true,\n      // show the axis line\n      linecolor: 'white',\n      // axis line color\n      linewidth: 2,\n      // thickness of axis line\n      tickcolor: 'rgb(50, 50, 50)'\n    },\n    yaxis: {\n      title: {\n        text: \"LAP TIME\"\n      },\n      // autorange: true, \n      showgrid: true,\n      gridcolor: 'rgb(50, 50, 50)',\n      gridwidth: 1,\n      showline: true,\n      // show the axis line\n      linecolor: 'white',\n      // axis line color\n      linewidth: 2,\n      // thickness of axis line\n      tickcolor: 'rgb(50, 50, 50)'\n      // scaleanchor: \"x\",\n    },\n    margin: {\n      l: 50,\n      r: 30\n      // b: 65,\n      // t: 65\n    },\n    paper_bgcolor: \"rgb(0,0,0)\",\n    plot_bgcolor: \"rgb(0,0,0)\",\n    showlegend: false,\n    font: {\n      color: '#ffffff',\n      size: 16\n    },\n    modebar: {\n      remove: 'lasso2dp',\n      orientation: 'v'\n    },\n    height: y,\n    width: x\n  };\n\n  // bar graph\n  let first = orderby == \"Mean\" ? traceData[0].mean : traceData[0].median;\n  let bar = [{\n    y: orderby == \"Mean\" ? traceData.map(item => item.mean / first * 100 - 100) : traceData.map(item => item.median / first * 100 - 100),\n    x: traceData.map(item => item.trace.name),\n    text: orderby == \"Mean\" ? traceData.map(item => (item.mean / first * 100 - 100).toFixed(3) + \"%\") : traceData.map(item => (item.median / first * 100 - 100).toFixed(3) + \"%\"),\n    marker: {\n      color: traceData.map(item => item.trace.fillcolor)\n    },\n    type: 'bar',\n    textposition: \"outside\",\n    textfont: {\n      size: 16,\n      weight: 700\n    },\n    textangle: \"-90\",\n    cliponaxis: false\n  }];\n  let layout2 = {\n    title: {\n      text: `Deficit to the leader Sorted by ${orderby}`\n    },\n    xaxis: {\n      tickangle: -90,\n      automargin: true,\n      showline: true,\n      // show the axis line\n      linecolor: 'white',\n      // axis line color\n      linewidth: 2,\n      // thickness of axis line\n      tickcolor: 'rgb(50, 50, 50)'\n    },\n    yaxis: {\n      title: {\n        text: \"SLOWER ===>\"\n      },\n      autorange: true,\n      showgrid: true,\n      gridcolor: 'rgb(50, 50, 50)',\n      gridwidth: 1,\n      automargin: true,\n      showline: true,\n      // show the axis line\n      linecolor: 'white',\n      // axis line color\n      linewidth: 2,\n      // thickness of axis line\n      tickcolor: 'rgb(50, 50, 50)'\n    },\n    margin: {\n      l: 50,\n      r: 30\n      // b: 65,\n      // t: 65\n    },\n    paper_bgcolor: \"rgb(0,0,0)\",\n    plot_bgcolor: \"rgb(0,0,0)\",\n    showlegend: false,\n    font: {\n      color: '#ffffff',\n      size: 16\n    },\n    modebar: {\n      remove: 'lasso',\n      orientation: 'v'\n    },\n    height: y,\n    width: x\n  };\n\n  // Line chart\n  let layout3 = {\n    title: {\n      text: `Race Progression`\n    },\n    xaxis: {\n      // tickangle: 90,\n      dtick: 5,\n      showline: true,\n      // show the axis line\n      linecolor: 'white',\n      // axis line color\n      linewidth: 2,\n      // thickness of axis line\n      tickcolor: 'rgb(50, 50, 50)'\n    },\n    yaxis: {\n      title: {\n        text: \"LAP TIME\"\n      },\n      autorange: true,\n      showgrid: true,\n      gridcolor: 'rgb(50, 50, 50)',\n      gridwidth: 1,\n      showline: true,\n      // show the axis line\n      linecolor: 'white',\n      // axis line color\n      linewidth: 2,\n      // thickness of axis line\n      tickcolor: 'rgb(50, 50, 50)'\n    },\n    margin: {\n      l: 50,\n      r: 30\n      // b: 65,\n      // t: 65\n    },\n    paper_bgcolor: \"rgb(0,0,0)\",\n    plot_bgcolor: \"rgb(0,0,0)\",\n    font: {\n      color: '#ffffff',\n      size: 16\n    },\n    modebar: {\n      remove: 'lasso2dp',\n      orientation: 'v'\n    },\n    legend: {\n      \"orientation\": \"h\"\n    },\n    height: y,\n    width: x\n  };\n  let linetraces = [];\n  let colorCount = {};\n  stintmap.forEach((data, driver) => {\n    let color = data.teamColor;\n    if (!colorCount[color]) {\n      colorCount[color] = 1;\n    } else {\n      colorCount[color]++;\n    }\n    data.laptimes.forEach((stint, index) => {\n      let filteredLaps = removeOutliers(stint);\n      let y = filteredLaps.map(item => item[0]);\n      let x = filteredLaps.map(item => item[1]);\n      let lastName = driver.split(\" \").pop().slice(0, 3).toUpperCase();\n      linetraces.push({\n        y: y,\n        x: x,\n        type: \"scatter\",\n        name: `${lastName}`,\n        marker: {\n          color: data.teamColor,\n          size: 2\n        },\n        line: {\n          dash: colorCount[data.teamColor] === 1 ? 'solid' : 'dot',\n          width: 2\n        }\n      });\n    });\n  });\n  Plotly.newPlot(\"boxPlot\", traces, layout1, config);\n  Plotly.newPlot(\"barPlot\", bar, layout2, config);\n  Plotly.newPlot(\"linePlot\", linetraces, layout3, config);\n  function debounce(func, delay) {\n    let timeout;\n    return function (...args) {\n      clearTimeout(timeout);\n      timeout = setTimeout(() => func.apply(this, args), delay);\n    };\n  }\n  const resizePlot = debounce(function () {\n    let x = boxDiv.clientWidth;\n    let height = x < 1080 ? x : x / 1.777;\n    [boxDiv, barDiv, lineDiv].forEach(div => {\n      Plotly.relayout(div, {\n        width: x,\n        height: height\n      });\n    });\n  }, 200);\n  window.addEventListener(\"resize\", resizePlot);\n  window.onload = resizePlot;\n}\nfunction convertTime(sss_mmm) {\n  if (!sss_mmm) {\n    return '';\n  }\n  let [seconds, milliseconds] = sss_mmm.split('.');\n  seconds = parseInt(seconds, 10);\n  let minutes = Math.floor(seconds / 60);\n  let remainingSeconds = seconds % 60;\n  if (milliseconds == undefined || minutes === NaN || remainingSeconds === NaN) {\n    return 'NaN';\n  }\n  let formattedTime = `${String(minutes).padStart(1, '0')}:${String(remainingSeconds).padStart(2, '0')}.${milliseconds}`;\n  return formattedTime;\n}\nfunction updateAverages(l_name, t_name) {\n  for (let i = 0; i < l_name.length; i++) {\n    let sum = 0;\n    let count = 0;\n    document.querySelectorAll(`.lap[data-stint=\"${i}\"]`).forEach(cell => {\n      if (cell.classList.contains('selected')) {\n        const lapTime = parseFloat(cell.getAttribute('value'));\n        if (!isNaN(lapTime)) {\n          sum += lapTime;\n          count++;\n        }\n      }\n    });\n    const average = count === 0 ? 0 : (sum / count).toFixed(3);\n    let timeFormated = convertTime(average);\n    document.getElementById(`avg-${i}`).textContent = timeFormated;\n  }\n}\nfunction exportToExcel() {\n  try {\n    const table = document.querySelector('table');\n    const wb = XLSX.utils.table_to_book(table, {\n      sheet: \"Sheet1\"\n    });\n    XLSX.writeFile(wb, 'stint_data.xlsx');\n  } catch (error) {\n    console.log(error);\n  }\n}\nasync function searchDriver() {\n  try {\n    controller.abort();\n    controller = new AbortController();\n    loadingScreen.style.display = 'flex';\n    const container = document.getElementById('table-container');\n    container.innerHTML = '';\n    const chart = document.getElementById('charts');\n    chart.style.display = \"none\";\n    const exportdiv = document.getElementById('export');\n    exportdiv.style.display = 'none';\n    driverMap.clear();\n    const selectedDriver = document.querySelectorAll('#driver-list .choose');\n    if (selectedDriver.length != 0) {\n      document.getElementById('selectall').classList.add('clicked');\n      document.getElementById('selectall').textContent = 'UNSELECT ALL';\n    }\n    if (selectedDriver.length == 0) {\n      document.getElementById('selectall').classList.remove('clicked');\n      document.getElementById('selectall').textContent = 'SELECT ALL';\n    }\n    for (let i = 0; i < selectedDriver.length; i++) {\n      const element = selectedDriver[i];\n      await gatherdata(element.value, element.textContent, element.dataset.team, element.dataset.team_color);\n    }\n    generateStintSelection();\n  } catch (error) {\n    console.log(error);\n    loadingScreen.style.display = 'none';\n  }\n}\nfunction generateStintSelection() {\n  const formContainer = document.getElementById('driver-stints-form');\n  formContainer.innerHTML = '';\n  loadingScreen.style.display = 'none';\n  const updatebutton = document.getElementById('update');\n  updatebutton.style.display = 'block';\n  let array = [...driverMap];\n  if (curYear == 2025) {\n    array.sort((a, b) => {\n      return conList.indexOf(a[1].team_name) - conList.indexOf(b[1].team_name);\n    });\n  } else {\n    array.sort((a, b) => {\n      if (a[1].team_name < b[1].team_name) return -1;\n      if (a[1].team_name > b[1].team_name) return 1;\n      return 0;\n    });\n  }\n  driverMap = new Map(array);\n  if (array.length == 0) {\n    updatebutton.style.display = 'none';\n  } else {\n    for (let [driver, data] of driverMap) {\n      const driverDiv = document.createElement('div');\n      driverDiv.className = 'driver-div';\n      driverDiv.dataset.driverno = data.num;\n      const driverLabel = document.createElement('div');\n      driverLabel.textContent = `${driver}`;\n      driverLabel.className = 'drivername';\n      const del = document.createElement('button');\n      del.textContent = 'REMOVE';\n      del.className = 'del-button';\n      del.value = data.num;\n      driverDiv.appendChild(del);\n      driverDiv.appendChild(driverLabel);\n      const sessionType = document.querySelector(\".session-container .choose\")?.textContent || \"\";\n      for (let i = 0; i < data.laptimes.length; i++) {\n        const holder = document.createElement('div');\n        holder.className = 'holder';\n        const checkbox = document.createElement('input');\n        checkbox.type = 'checkbox';\n        checkbox.id = `stint-${driver}-${i}`;\n        checkbox.value = i;\n        const label = document.createElement('label');\n        const stintLapCount = data.laptimes[i].length;\n        label.htmlFor = `stint-${driver}-${i}`;\n        const tyreType = data.tyres[i];\n        label.textContent = ` ${tyreType} (${stintLapCount} laps)`;\n        if (sessionType.toLowerCase() == \"sprint\" || sessionType.toLowerCase().includes(\"race\")) {\n          if (label.textContent.toLocaleLowerCase().includes(\"all\")) {\n            checkbox.checked = true;\n          } else {\n            checkbox.checked = false;\n          }\n        } else {\n          checkbox.checked = true;\n        }\n        holder.appendChild(checkbox);\n        holder.appendChild(label);\n        driverDiv.appendChild(holder);\n      }\n      del.addEventListener('click', event => {\n        const ul = document.getElementById('driver-list');\n        const list = ul.getElementsByTagName('li');\n        for (let li of list) {\n          if (li.getAttribute('value') === event.target.value) {\n            li.classList.remove('choose');\n            removeCard(parseInt(event.target.value));\n          }\n        }\n      });\n      formContainer.appendChild(driverDiv);\n    }\n  }\n}\nfunction removeCard(dec) {\n  const card = document.querySelector(`.driver-div[data-driverno=\"${dec}\"]`);\n  card.remove();\n  updateTable();\n}\nfunction updateTable() {\n  let stintmap = new Map();\n  for (let [driver, data] of driverMap) {\n    let laps = [];\n    let tyres = [];\n    for (let i = 0; i < data.laptimes.length; i++) {\n      const checkbox = document.getElementById(`stint-${driver}-${i}`);\n      if (checkbox && checkbox.checked) {\n        laps.push(data.laptimes[i]);\n        tyres.push(data.tyres[i]);\n      }\n    }\n    if (laps.length != 0) {\n      stintmap.set(driver, {\n        laptimes: [...laps],\n        tyres: [...tyres],\n        team_name: data.team_name,\n        team_color: data.team_color\n      });\n    } else {\n      stintmap.delete(driver);\n    }\n  }\n  displayTable(stintmap);\n  updatePlot();\n}\nfunction getMedian(arr) {\n  if (arr.length < 1) {\n    return -1;\n  }\n  let sorted = [...arr].filter(v => v !== 'NaN' && !isNaN(v)).map(v => parseFloat(v)).sort((a, b) => a - b);\n  let mid = Math.floor(sorted.length / 2);\n  return sorted.length % 2 !== 0 ? sorted[mid] : (sorted[mid - 1] + sorted[mid]) / 2;\n}\nfunction getMean(arr) {\n  if (arr.length < 1) {\n    return -1;\n  }\n  let sorted = [...arr].filter(v => v !== 'NaN' && !isNaN(v)).map(v => parseFloat(v)).sort((a, b) => a - b);\n  let sum = 0;\n  for (let i = 0; i < sorted.length; i++) {\n    sum += sorted[i];\n  }\n  return sum / sorted.length;\n}\nfunction removeOutliers(data) {\n  let cleanedData = data.filter(val => val[0] !== 'NaN' && !isNaN(val[0])).map(val => [parseFloat(val[0]), parseInt(val[1])]);\n  return cleanedData;\n}\n\n// Buttons\ndocument.getElementById('screenshot-btn').addEventListener('click', function () {\n  const tableContainer = document.getElementById('table-container');\n  html2canvas(tableContainer).then(function (canvas) {\n    let link = document.createElement('a');\n    link.href = canvas.toDataURL();\n    link.download = 'screenshot.png';\n    link.click();\n  });\n});\ndocument.getElementById('selectall').addEventListener('click', function () {\n  if (this.classList.contains('clicked')) {\n    this.classList.remove('clicked');\n    const listDriver = document.querySelectorAll('#driver-list li');\n    listDriver.forEach(item => item.classList.remove('choose'));\n    this.textContent = 'SELECT ALL';\n    searchDriver();\n  } else {\n    loadingScreen.style.display = 'flex';\n    this.classList.add('clicked');\n    const listDriver = document.querySelectorAll('#driver-list li');\n    listDriver.forEach(item => item.classList.add('choose'));\n    this.textContent = 'UNSELECT ALL';\n    searchDriver();\n  }\n});\nlet isMedianSort = true; // Default OFF state\n\ndocument.getElementById('toggleSwitch').addEventListener(\"change\", function () {\n  isMedianSort = !isMedianSort;\n  toggleLabel.textContent = isMedianSort ? \"Median\" : \"Mean\";\n  orderby = isMedianSort ? \"Median\" : \"Mean\";\n  updatePlot();\n});\ndocument.getElementById(\"searchButton\").addEventListener(\"click\", searchDriver);\ndocument.getElementById('update').addEventListener('click', updateTable);\ndocument.getElementById('export-but').addEventListener('click', exportToExcel);\ncreateYearlist();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1866\n")},1903:()=>{},2634:()=>{},4394:()=>{}}]);